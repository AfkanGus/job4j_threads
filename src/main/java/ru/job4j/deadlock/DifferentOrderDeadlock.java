package ru.job4j.deadlock;

/**
 * 7. Deadlock [#504910 #516263].
 * Виды взаимоблокировок:
 * <p>
 * - вызванные порядком наложения блокировок
 * <p>
 * - вызванные динамическим порядком блокировок (блокировка порядка синхронизации)
 * <p>
 * - между взаимодействующими объектами
 * <p>
 * - взаимоблокировки ресурсов
 */
public class DifferentOrderDeadlock {
    /*- Deadlock, вызванный порядком наложения блокировок. */
    private final Object left = new Object();
    private final Object right = new Object();

    /*не соблюден порядок захвата блокировок нитями*/
    public void leftRight() {
        /**
         * Первый поток захватывает блокировку на объекте left, затем пытается захватить
         * блокировку на объекте right в методе leftRight().
         * Второй поток захватывает блокировку на объекте right, затем пытается
         * захватить блокировку на объекте left в методе rightLeft().
         */
        synchronized (left) {
            synchronized (right) {
                return;
                /*код метода*/
            }
        }
    }

    /**
     * Если оба потока успеют захватить свои первые блокировки,
     * они будут ждать друг друга на захват второй блокировки, и никто не сможет
     * продолжить выполнение, так как оба потока будут заблокированы.
     */
    public void rightLeft() {
        /*Чтобы избежать deadlock, нужно согласовать порядок захвата блокировок.*/
        synchronized (right) {
            /*если везде сначала захватывать left, а затем right, deadlock не произойдет*/
            synchronized (left) {
                return;
                /* synchronized (left)
             {Изменено, чтобы всегда сначала захватывать left
                 synchronized (right) {
                 */
            }
        }
    }
}
